
#Использовать xml-parser
#Использовать semver
#Использовать json

// TODO: разобрать модуль на мелкие составляющие.

Функция СодержимоеСтраницыКонтента(Знач ПутьККонтенту) Экспорт
	
	Перем Значение;
	ЭтоMD = Истина;
	
	Попытка		
		ТекстКонтента = МодульОбщегоНазначения.ПолучитьСодержимоеMDФайла(ПутьККонтенту, КодировкаТекста.UTF8);
		Значение = МодульОбщегоНазначения.ПреобразоватьMDВHTML(ТекстКонтента);
		Заголовок = ПолучитьЗаголовокИзMD(Значение);
	Исключение
		Значение = ""; // пока так
		Заголовок = "";
	КонецПопытки;
	
	Возврат Новый Структура("Заголовок, Содержимое, ЭтоMD", Заголовок, Значение, ЭтоMD);
	
КонецФункции

Функция ПолучитьЗаголовокИзMD(ТекстКонтента) Экспорт
	
	Результат = "";
	
	Регулярное = Новый РегулярноеВыражение("\<h1(.*|)\>([^\<]+)\<\/h1\>");
	Регулярное.ИгнорироватьРегистр = Истина;
	Регулярное.Многострочный = Истина;
	
	Совпадения = Регулярное.НайтиСовпадения(ТекстКонтента);
	
	Если Совпадения.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПервыйЭлементСовпадения = Совпадения[0];
	Если ПервыйЭлементСовпадения.Группы.Количество() > 1 Тогда 
		Результат = ПервыйЭлементСовпадения.Группы[ПервыйЭлементСовпадения.Группы.Количество() - 1].Значение;
	Иначе
		Результат = ПервыйЭлементСовпадения.Значение; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// так и просится все держать в какой-нибудь бд
Функция ПолучитьСписокСборок() Экспорт
	
	СписокИменИсключений = ПолучитьИменаИсключенияСборокДляОбщегоСписка();
	
	КаталогПоиска = ОбъединитьПути(ПолучитьКаталогКонтента(), "build");
	Файлы = НайтиФайлы(КаталогПоиска, "*.md");
	
	СписокСборок = Новый Массив;
	ВременныйМассив = Новый Массив;
	Соответствие = Новый Соответствие;
	Для Каждого Файл Из Файлы Цикл
		
		ИмяВерсии = Файл.ИмяБезРасширения;
		
		Если СписокИменИсключений.Найти(нРег(ИмяВерсии)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеВФорматеВерсии = СтрЗаменить(ИмяВерсии, "_", ".");
		ВременныйМассив.Добавить(ЗначениеВФорматеВерсии);
		Соответствие.Вставить(ЗначениеВФорматеВерсии, ИмяВерсии);
		
	КонецЦикла;
	
	Версии.СортироватьВерсии(ВременныйМассив, "УБЫВ");
	
	Для Каждого ЭлементМассива Из ВременныйМассив Цикл
		
		ЗначениеИзСоответвия = Соответствие.Получить(ЭлементМассива); 
		
		ТекущаяСборка = Новый Сборка();
		ТекущаяСборка.Ссылка = "/downloads/archive/" + ЗначениеИзСоответвия;
		ТекущаяСборка.Заголовок = ЭлементМассива;	
		
		СписокСборок.Добавить(ТекущаяСборка);	
		
	КонецЦикла;
	
	Возврат СписокСборок;
	
КонецФункции

Функция ПолучитьЗначениеПараметраИзКонфигурации(ИмяПараметра)
	
	// todo: в отдельный класс?
	МенеджерПараметров = Новый МенеджерПараметров();
	МенеджерПараметров.ИспользоватьПровайдерJSON();
	МенеджерПараметров.УстановитьФайлПараметров(ОбъединитьПути(СтартовыйСценарий().Каталог, "config.json"));
	МенеджерПараметров.Прочитать();
	
	РежимЗапуска = МенеджерПараметров.Параметр("РежимЗапуска");
	Значение = МенеджерПараметров.Параметр(РежимЗапуска + "." + ИмяПараметра);
	Возврат Значение;
	
КонецФункции

Функция ПолучитьКаталогКонтента()
	
	Возврат ЗначениеКонфигурацииПриложения(
	"OS_CONTENT_DIRECTORY", 
	"КаталогКонтента", 
	ОбъединитьПути(СтартовыйСценарий().Каталог, "data", "content"));
	
КонецФункции

Функция КаталогКонтента() Экспорт
	Возврат ПолучитьКаталогКонтента();
КонецФункции

Функция ПолучитьКаталогСборок() Экспорт
	
	Возврат ЗначениеКонфигурацииПриложения(
	"OS_DOWNLOAD_DIRECTORY", 
	"КаталогКонтента", 
	ОбъединитьПути(СтартовыйСценарий().Каталог, "data", "download"));
	
КонецФункции

Функция ЗначениеКонфигурацииПриложения(ПеременнаяСреды, ИмяПараметраКонфигурации, ДефолтноеЗначение)
	
	Значение = ПолучитьПеременнуюСреды(ПеременнаяСреды);
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Значение = ПолучитьЗначениеПараметраИзКонфигурации(ИмяПараметраКонфигурации);
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Значение = ДефолтноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьСоставСборки(ИмяСборки) Экспорт
	
	Сборка = Новый СоставСборкиПО();
	Сборка.Версия = ИмяСборки;
	
	// проверить есть ли каталог
	ПутьККаталогу = ОбъединитьПути(ПолучитьКаталогСборок(), ИмяСборки);
	Если ФС.КаталогСуществует(ПутьККаталогу) Тогда
		
		Для Каждого ВариантСборки Из Сборка.СписокВаринтовСборки Цикл
			ФайлВариантаСборки = ПолучитьПервыйФайлПоРасширению(ПутьККаталогу, ВариантСборки.Расширение);
			Если ФайлВариантаСборки <> Неопределено Тогда
				Сборка.ДобавитьСтрокуСоставаСборки(
				ФайлВариантаСборки.Имя, 
				Сборка.ПолучитьСсылкуНаФайл(ИмяСборки, ФайлВариантаСборки.Имя), 
				ВариантСборки.Представление, 
				ФайлВариантаСборки.ПолучитьВремяИзменения());	
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		//Сообщить("Не сущестует: " + ПутьККаталогу, СтатусСообщения.Важное);
	КонецЕсли;
	
	Возврат Сборка;
	
КонецФункции

Функция ПолучитьПервыйФайлПоРасширению(Каталог, Знач Расширение)
	
	Расширение = ?(Лев(Расширение, 1) = ".", Расширение, "." + Расширение);
	Файлы = НайтиФайлы(ОбъединитьПути(Каталог, ""), "*" + Расширение);
	Возврат ?(Файлы.Количество() > 0, Файлы[0], Неопределено);
	
КонецФункции

Функция ПолучитьПутьКФайлуСборки(Сборка, Идентификатор) Экспорт
	
	Расширения = ДоступныеРасширения();
	Если Расширения.Найти(нРег(Идентификатор)) <> Неопределено Тогда
		Файлы = НайтиФайлы(ОбъединитьПути(ПолучитьКаталогСборок(), Сборка), "*." + Идентификатор);
		Если Файлы.Количество() Тогда
			Возврат Файлы[0].ПолноеИмя;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ОбъединитьПути(ПолучитьКаталогСборок(), Сборка, Идентификатор);
	
КонецФункции

Функция ДоступныеРасширения()
	
	Коллекция = Новый Массив;
	Коллекция.Добавить("exe");
	Коллекция.Добавить("zip");
	Коллекция.Добавить("rpm");
	Коллекция.Добавить("deb");
	Коллекция.Добавить("vsix");
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьИменаИсключенияСборокДляОбщегоСписка()
	
	Результат = Новый Массив;
	Результат.Добавить("latest");
	Результат.Добавить("night-build");
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПараметрыСтраницыХлебнымиКрошками(ПараметрыСтраницы, Заголовок, Ссылка, ИдентификаторСтраницы) Экспорт
	
	ЛокальныеПараметры = Новый ЛокальныеПараметрыСтраницы(Заголовок, ИдентификаторСтраницы = Неопределено, Ссылка);
	ПараметрыСтраницы.ЛокальнаяНавигация.Добавить(ЛокальныеПараметры);
	Если ЗначениеЗаполнено(ИдентификаторСтраницы) Тогда		
		ЛокальныеПараметры = Новый ЛокальныеПараметрыСтраницы(
		?(ПустаяСтрока(ПараметрыСтраницы.Заголовок), ИдентификаторСтраницы, ПараметрыСтраницы.Заголовок), 
		Истина);
		
		ПараметрыСтраницы.ЛокальнаяНавигация.Добавить(ЛокальныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокСтраницы(Контроллер, Заголовок) Экспорт
	Контроллер.ДанныеПредставления["Title"] = Заголовок;
КонецПроцедуры

Процедура УстановитьПризнакСтраницы(Контроллер, Значение) Экспорт
	Контроллер.ДанныеПредставления["Url"] = Значение;
КонецПроцедуры

Функция ДанныеФайлаJSON(ИмяФайла) Экспорт
	Парсер = Новый ПарсерJSON();
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	СтрокаJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	ДанныеФайла = Парсер.ПрочитатьJSON(СтрокаJSON);
	Возврат ДанныеФайла; 
КонецФункции